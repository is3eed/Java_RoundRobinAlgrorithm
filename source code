import java.util.ArrayList;
import java.util.Scanner;

/*
    CPU Scheduling Algorithm (Round Robin)
*/
public class RR_GroupProject {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int noProcesses;
        int quantum;
        Process[] p;
        System.out.print("Please Enter Number of Processes: ");
        noProcesses = noProcess(in, 'y');
        p = createProcesses(in, noProcesses);
        System.out.print("Please Enter Quantum of processes: ");
        quantum = in.nextInt();
        roundRobin(p, quantum);
        computingTAT(p);
        computingWaitingTime(p);
        displayResult(p);
        displayGanttChart(p, quantum);

    }

    static int noProcess(Scanner in, char s) {
        int process = -1;
        String input = "";
        input = in.next(); // read number of processes from user
        process = (input.matches("[0-9]||[1-9][0-9]") ? Integer.parseInt(input) : -1);
        if (s == 'y') {
            while (process < 1 || process >= 99) {
                System.out.print("Wrong input!!\nPlease Enter a valid Number: ");
                input = in.next(); // read number of processes from user
                process = (input.matches("[0-9]||[1-9][0-9]") ? Integer.parseInt(input) : -1);
            }
        } else {
            while (process < 0 || process >= 999) {
                System.out.print("Wrong input!!\nPlease Enter a valid Number: ");
                input = in.next(); // read number of processes from user
                process = (input.matches("[0-9]||[1-9][0-9]") ? Integer.parseInt(input) : -1);
            }
        }
        return process;
    }

    static Process[] createProcesses(Scanner in, int noProcesses) {
        Process[] processes = new Process[noProcesses];
        int burst;
        int aTime;
        String arrive;
        boolean arrival = false; // a boolean to check if user wants to enter Arrival time manually
        for (int i = 0; i < processes.length; i++) {
            processes[i] = new Process("P" + (i + 1)); // initializing processes identifier with values from P1 ... Pn
            System.out.print("Please enter burst time of process " + processes[i].getId() + ": "); // enter burst time of process Pi
            burst = noProcess(in, 'y');
            processes[i].setBurstTime(burst); // set burst time for process Pi
        }
        System.out.print("Do you want to assign Arrival time for each process, if no all processes will arrive at 0 [Y/N]: "); // ask user if he want to enter A.T or set it all as 0
        while (true) {
            arrive = in.next().toLowerCase().charAt(0) + "";
            if (arrive.equals("y")) {
                arrival = true;
                break;
            } else if (arrive.equals("n")) {
                arrival = false;
                break;
            } else {
                System.out.print("Wrong input!!\nPlease enter a valid answer: ");
            }
        }
        if (arrival) { // in case of true ask user to enter arrival time of each process, if false it will remain 0 
            for (int i = 0; i < processes.length; i++) {
                System.out.print("Please enter arrival time of process " + processes[i].getId() + ": ");
                aTime = noProcess(in, ' ');
                processes[i].setArrivalTime(aTime);
            }
        }

        return processes; // return array of Process created and initialized here to main method
    }

    static int getRemainingB(int[] processes) { // get remaining burst time to check if there is more processes to be executed 
        int total = 0;
        for (int i = 0; i < processes.length; i++) {
            total += processes[i];
        }
        return total;
    }

    static Process[] computingTAT(Process[] p) {
        for (Process p1 : p) {
            p1.setTaTime(p1.getCompleteTime() - p1.getArrivalTime());
        }
        return p;
    }

    static Process[] computingWaitingTime(Process[] p) {
        for (Process p1 : p) {
            p1.setWaitTime(p1.getTaTime() - p1.getBurstTime());
        }
        return p;
    }

    static Process[] roundRobin(Process[] p, int quantum) { // Round Robin CPU scheduling algorithm for processes within the Operating System
        int remainingB[] = new int[p.length];
        boolean prevEmpty = true;
        Queue readyQ = new Queue(p.length); // create ready queue to execute processes in FIFO
        int time = 0; // total time for completing all processes
        for (int i = 0; i < p.length; i++) {
            remainingB[i] = p[i].getBurstTime(); // copy values of Burst time for each process to array of int 
        }
        int current = -1; // Index of current working Process
        int totalBurstTime = 1; // total remaining burst time of all processes
        Process temp; // a temp object of current working process to update values
        while (totalBurstTime >= 0) { // a while loop that running as long as there is more processes to be executed
            for (int j = 0; j < p.length; j++) {
                if (p[j].getArrivalTime() == time) {
                    readyQ.queueEnqueue(p[j]);// if a process arrive, add it to Ready Queue
                    addInSeq(j, p);
                }
            }
            if (readyQ.isEmpty()) { // if no process arrive yet in Ready Queue
                if (prevEmpty) {
                    addInSeq(-1, p);
                    prevEmpty = false;
                    addInExec(time, p);
                }
                time++;
            } else {
                int oldTime = time;
                prevEmpty = true;
                temp = readyQ.dequeue();
                addInExec(time, p);
                current = Integer.parseInt(temp.getId().substring(1)) - 1; // get current working process index 
                if (remainingB[current] >= quantum) {

                    time += quantum;
                    remainingB[current] -= quantum;

                } else {
                    time += remainingB[current];
                    remainingB[current] = 0;

                }
                if (remainingB[current] == 0) {
                    p[current].setCompleteTime(time);
                }
                totalBurstTime = getRemainingB(remainingB);
                if (totalBurstTime == 0) {
                    addInExec(time, p);
                    break;
                }
                for (int j = 0; j < p.length; j++) {
                    if (p[j].getArrivalTime() < time && p[j].getArrivalTime() > oldTime && p[j] != temp && !readyQ.find(p[j])) {
                        readyQ.queueEnqueue(p[j]);// if a process arrive, add it to Ready Queue
                        addInSeq(j, p);
                    }
                }
                if (remainingB[current] != 0) {
                    readyQ.queueEnqueue(temp);
                    addInSeq(current, p);
                }
            }

        }
        return p;
    }

    static void displayResult(Process[] p) {
        double averageTAT = 0, averageWT = 0;
        System.out.println(" -------------------------------------------------------");
        System.out.println("|\tPname\tBT\tAT\tCT\tTAT\tWT\t|");
        for (int i = 0; i < p.length; i++) {
            System.out.println("|\t" + p[i].getId() + "\t" + p[i].getBurstTime() + "\t" + p[i].getArrivalTime() + "\t" + p[i].getCompleteTime() + "\t" + p[i].getTaTime() + "\t" + p[i].getWaitTime() + "\t|");
            averageTAT += p[i].getTaTime();
            averageWT += p[i].getWaitTime();
        }
        averageTAT /= p.length;
        averageWT /= p.length;
        System.out.printf("|\tAverage\t \t \t \t%.1f \t%.1f\t|\n", averageTAT, averageWT);
        System.out.println(" -------------------------------------------------------");
    }

    static void displayGanttChart(Process[] p, int quantum) {
        int index = 0;
        ArrayList<String> seq = p[0].getSeq();
        ArrayList<Integer> exec = p[0].getExec();
        while (seq.size() >= exec.size()) {
            seq.remove(seq.size() - 1);
        }

        while (!seq.isEmpty()) {
            System.out.print(seq.remove(index) + "\t");
        }
        index = 0;
        System.out.println("");
        while (!exec.isEmpty()) {
            System.out.print(exec.remove(index) + "\t");
        }
        System.out.println("");
    }

    static void addInSeq(int j, Process[] p) {

        String sequence = ((j != -1) ? (p[j].getId() + " ") : "No P");
        ArrayList<String> temp1 = p[0].getSeq();
        temp1.add(sequence);
        p[0].setSeq(temp1);
    }

    static void addInExec(int j, Process[] p) {
        ArrayList<Integer> temp1 = p[0].getExec();
        temp1.add(j);
        p[0].setExec(temp1);
    }
}

class Queue {

    private int front, rear, capacity;
    private Process queue[];

    Queue(int c) {
        front = rear = 0;
        capacity = c;
        queue = new Process[capacity];
    }

    // function to insert an element 
    // at the rear of the queue 
    public void queueEnqueue(Process process) {
        // check queue is full or not 
        if (capacity == rear) {
            System.out.printf("\nQueue is full\n");
            return;
        } // insert element at the rear 
        else {
            queue[rear] = process;
            rear++;
        }
        return;
    }

    public boolean isEmpty() {
        return front == rear;
    }

    public Process dequeue() {
        Process x = queue[front];
        queueDequeue();
        return x;
    }

    // function to delete an element 
    // from the front of the queue 
    private void queueDequeue() {
        // if queue is empty 
        if (front == rear) {
            System.out.printf("\nQueue is empty\n");
        } // shift all the elements from index 2 till rear 
        // to the right by one 
        else {
            for (int i = 0; i < rear - 1; i++) {
                queue[i] = queue[i + 1];
            }

            // store 0 at rear indicating there's no element 
            if (rear < capacity) {
                queue[rear] = null;
            }

            // decrement rear 
            rear--;
        }

    }

    public boolean find(Process p) {

        for (int i = 0; i < queue.length; i++) {
            if (queue[i] != null) {
                if (queue[i] == p) {
                    return true;
                }
            }
        }
        return false;
    }

}

class Process {

    private String id;
    private int burstTime;
    private int arrivalTime;
    private int completeTime;
    private int taTime;
    private int waitTime;
    private ArrayList<String> seq;
    private ArrayList<Integer> exec;

    public Process(String id) {
        this.id = id;
        this.arrivalTime = 0;
        if (id.equals("P1")) {
            seq = new ArrayList<>();
            exec = new ArrayList<>();
        }
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public int getBurstTime() {
        return burstTime;
    }

    public void setBurstTime(int burstTime) {
        this.burstTime = burstTime;
    }

    public int getArrivalTime() {
        return arrivalTime;
    }

    public void setArrivalTime(int arrivalTime) {
        this.arrivalTime = arrivalTime;
    }

    public int getCompleteTime() {
        return completeTime;
    }

    public void setCompleteTime(int completeTime) {
        this.completeTime = completeTime;
    }

    public int getTaTime() {
        return taTime;
    }

    public void setTaTime(int taTime) {
        this.taTime = taTime;
    }

    public int getWaitTime() {
        return waitTime;
    }

    public void setWaitTime(int waitTime) {
        this.waitTime = waitTime;
    }

    public ArrayList<String> getSeq() {
        return seq;
    }

    public void setSeq(ArrayList<String> seq) {
        this.seq = seq;
    }

    public ArrayList<Integer> getExec() {
        return exec;
    }

    public void setExec(ArrayList<Integer> exec) {
        this.exec = exec;
    }

}
